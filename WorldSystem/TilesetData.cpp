/** 
 *  AKARRA SOURCE CODE (c) Jens Bergensten
 *  See EULA.txt for information about this file.
 *
 *  File description (may not be accurate):
 *    Tileset definitions.
 **/

#include "TilesetData.h"

namespace WorldSystem
{

const int CELLBASES[32 * 32] =
	{
		0,	1,	2,	0,	2,	1,	0,	0,	3,	2,	0,	0,	1,	3,	2,	3,	0,	1,	0,	2,	0,	3,	1,	2,	0,	0,	1,	3,	2,	0,	1,	2,
		1,	2,	0,	1,	0,	1,	0,	2,	1,	3,	2,	1,	3,	0,	2,	1,	2,	0,	0,	1,	1,	3,	0,	0,	1,	2,	3,	1,	3,	1,	2,	0,
		0,	2,	1,	0,	2,	3,	1,	0,	2,	3,	0,	0,	1,	2,	0,	0,	3,	1,	2,	1,	0,	0,	2,	0,	0,	1,	2,	0,	2,	0,	1,	0,
		3,	3,	2,	0,	1,	0,	2,	0,	1,	0,	1,	0,	3,	0,	1,	2,	0,	1,	0,	0,	2,	1,	0,	1,	2,	3,	0,	0,	1,	3,	0,	2,
		2,	1,	0,	3,	1,	3,	0,	3,	0,	2,	1,	2,	3,	0,	2,	1,	0,	2,	0,	3,	1,	0,	2,	3,	0,	1,	2,	3,	0,	1,	3,	1,
		3,	0,	0,	1,	0,	0,	1,	3,	0,	3,	0,	1,	0,	1,	3,	0,	3,	0,	1,	3,	0,	0,	0,	1,	2,	3,	0,	0,	0,	1,	0,	2,
		1,	0,	3,	3,	2,	1,	0,	0,	1,	0,	3,	2,	0,	0,	1,	0,	1,	0,	3,	0,	0,	1,	3,	0,	0,	0,	1,	3,	2,	3,	0,	1,
		3,	2,	1,	0,	2,	3,	0,	1,	0,	2,	0,	1,	1,	3,	0,	3,	0,	1,	0,	0,	2,	2,	3,	0,	1,	3,	0,	0,	1,	0,	2,	3,
		0,	0,	0,	2,	0,	1,	2,	3,	1,	2,	3,	0,	2,	2,	1,	0,	2,	0,	3,	1,	3,	0,	1,	2,	1,	0,	2,	3,	0,	1,	2,	3,
		1,	3,	1,	0,	2,	0,	1,	2,	3,	0,	0,	2,	1,	0,	3,	0,	2,	1,	0,	2,	1,	0,	2,	0,	3,	0,	1,	0,	2,	0,	0,	0,
		0,	2,	2,	0,	1,	1,	0,	0,	0,	1,	3,	0,	0,	2,	2,	1,	0,	0,	2,	1,	0,	3,	1,	2,	0,	2,	3,	3,	2,	1,	3,	2,
		1,	0,	0,	3,	2,	0,	1,	2,	3,	0,	0,	2,	3,	1,	0,	0,	2,	1,	0,	0,	2,	3,	0,	0,	1,	2,	0,	0,	1,	2,	0,	1,
		3,	1,	2,	1,	3,	0,	2,	0,	1,	1,	3,	0,	2,	1,	2,	1,	0,	3,	0,	1,	0,	1,	2,	3,	0,	1,	1,	0,	3,	1,	0,	0,
		0,	0,	3,	0,	1,	0,	1,	3,	0,	0,	3,	1,	1,	0,	3,	3,	2,	1,	0,	2,	1,	3,	0,	1,	3,	0,	0,	2,	0,	1,	3,	1,
		0,	2,	1,	0,	0,	2,	1,	0,	2,	1,	0,	0,	2,	0,	0,	1,	0,	0,	1,	0,	0,	0,	2,	0,	0,	1,	2,	1,	0,	0,	3,	2,
		3,	0,	1,	2,	3,	3,	0,	1,	0,	0,	2,	1,	2,	1,	0,	2,	3,	0,	0,	3,	2,	1,	0,	0,	3,	1,	0,	3,	2,	2,	1,	0,
		0,	2,	3,	3,	1,	0,	0,	2,	2,	3,	3,	0,	3,	0,	2,	1,	0,	3,	1,	0,	3,	0,	1,	3,	0,	2,	0,	0,	2,	0,	1,	2,
		2,	0,	2,	0,	0,	2,	1,	3,	0,	0,	1,	2,	2,	0,	3,	3,	2,	2,	0,	2,	1,	3,	2,	0,	1,	1,	3,	1,	3,	1,	3,	0,
		3,	1,	0,	1,	3,	2,	0,	3,	1,	1,	3,	0,	0,	1,	0,	2,	0,	1,	3,	3,	0,	2,	0,	3,	0,	2,	2,	0,	2,	0,	2,	3,
		0,	0,	3,	0,	0,	3,	1,	0,	2,	0,	2,	1,	3,	0,	1,	1,	2,	0,	0,	1,	3,	1,	1,	0,	3,	0,	1,	0,	0,	3,	0,	1,
		0,	3,	1,	0,	1,	0,	0,	2,	0,	3,	1,	0,	1,	1,	3,	1,	3,	0,	1,	0,	0,	2,	0,	2,	2,	0,	3,	0,	0,	2,	2,	0,
		2,	0,	1,	2,	0,	2,	3,	0,	1,	0,	1,	3,	0,	2,	0,	3,	0,	2,	2,	3,	1,	0,	1,	3,	0,	2,	1,	2,	1,	0,	3,	1,
		1,	3,	0,	3,	2,	0,	1,	1,	3,	2,	3,	0,	0,	2,	1,	0,	3,	1,	0,	1,	0,	2,	0,	0,	1,	0,	0,	0,	3,	1,	0,	1,
		3,	2,	0,	1,	0,	3,	0,	2,	0,	2,	0,	2,	3,	0,	1,	0,	3,	0,	2,	0,	2,	0,	0,	2,	0,	2,	2,	1,	0,	0,	2,	2,
		0,	2,	3,	0,	2,	0,	0,	3,	1,	0,	1,	0,	1,	3,	0,	2,	2,	0,	0,	3,	0,	3,	3,	0,	3,	0,	0,	1,	2,	0,	3,	0,
		0,	1,	1,	0,	1,	1,	2,	0,	0,	2,	0,	3,	0,	0,	1,	3,	0,	1,	0,	2,	0,	0,	1,	2,	0,	0,	3,	0,	3,	1,	0,	1,
		2,	0,	2,	2,	0,	0,	3,	0,	1,	3,	0,	2,	0,	1,	0,	1,	2,	0,	3,	0,	1,	0,	3,	0,	3,	1,	0,	0,	3,	0,	2,	0,
		3,	1,	3,	1,	3,	0,	2,	1,	0,	0,	1,	3,	2,	0,	3,	3,	0,	3,	0,	1,	0,	2,	0,	0,	0,	2,	2,	1,	0,	3,	1,	0,
		3,	2,	0,	2,	0,	1,	3,	0,	2,	0,	2,	1,	0,	2,	1,	0,	1,	0,	2,	0,	1,	0,	1,	3,	2,	3,	1,	0,	1,	0,	0,	3,
		1,	0,	1,	0,	3,	2,	0,	0,	0,	1,	0,	1,	3,	0,	1,	2,	0,	3,	3,	1,	0,	2,	2,	0,	0,	2,	0,	0,	1,	2,	1,	2,
		1,	3,	2,	3,	0,	1,	3,	3,	2,	0,	0,	3,	0,	2,	3,	0,	0,	2,	1,	2,	0,	3,	0,	0,	2,	1,	3,	2,	2,	0,	3,	0,
		2,	0,	1,	3,	2,	0,	0,	1,	0,	1,	3,	1,	1,	2,	0,	3,	1,	3,	0,	0,	1,	2,	0,	3,	0,	1,	0,	3,	0,	1,	0,	3,
	};

const int TYPEBASES[16] =
	{
		0, 4, 8, 72, 136, 200, 264, 328, 392, 456, 520, 584, 648, 712, 776, 840
	};

const int TYPEBLOCKING[16] =
	{
		2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1
	};

// ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
// ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
int getCellTilebase(int x, int y)
{
	return (int)CELLBASES[x + (y << 5)];
}

// ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
// ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
int getTypeTilebase(int type)
{
	return (int)TYPEBASES[type];
}

// ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
// ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
int getTileHandle(int type, int x, int y)
{
	return (getTypeTilebase(type) + getCellTilebase(x, y));
}

// ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
// ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
int getBlockType(int tiletype)
{
	return (int)TYPEBLOCKING[tiletype];
}

}
